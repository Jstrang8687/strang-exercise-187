//AUTHOR: Jason Strang
//COURSE: CPT187
//PURPOSE: The purpose of this program is to run a checkout system for each order, by loading the items from a file, give out a prize, count the items,
//discounts & prizes at the end of day.
//CREATEDATE: 11/29/2021
package edu.cpt187.strang.exercise6;

//imports
import java.util.Scanner;



//start class
public class MainClass 
{
	//constants
	public static final char[] CHAR_MAIN_MENU_OPTIONS = {'A', 'B', 'Q'};
	public static final String[] MAIN_MENU_OPTIONS = {"Login", "Create Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventoy", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUSerFile.dat";

	public static void main(String[] args) 
	{//start prime read

		//Instances
		Inventory currentInventory = new Inventory();

		Order currentOrder = new Order();

		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);

		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		// Declare and Initialize Scanner
		Scanner input = new Scanner(System.in);

		//Declare and Initialize all Local variables
		String userName = "";
		char menuSelection = ' ';

		//display Welcome Banner
		displayWelcomeBanner();

		//prime read
		menuSelection = validateMainSelection(input);

		//run while not quit
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();

			//get user name
			userName = getUserName(input);

			if(menuSelection != 'A')
			{//start menuSelection not A selection Statement
				currentUser.setSearchedIndex(userName);

				if(currentUser.getSearchedIndex() >= 0)
				{//start >= 0 selection Statement
					displayAccountResults(userName);
				}
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));

					displayAccountResults();
				}//End >= 0 selection Statement
			}
			else
			{
				currentUser.setSearchedIndex(userName, getPassword(input));

				//start if statement 
				if(currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}
				else
				{
					menuSelection = validateFileSelection(input);

					//start while not r
					while(menuSelection != 'R')
					{
						// Start selection structure
						if (menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));
							// Start selection structure
							if(currentInventory.getRecordCount() <= 0)
							{
								displayFileError();
							}
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							}//end selection structure

						}
						else 
						{
							currentInventory.setSearchindex(validateSearchValue(input));
							// Start selection structure
							if(currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();

							}
							else
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setHowMany(validateHowMany(input));

								//start selection statement
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									displayOutOfStock();


								}//end if 
								else
								{//start else
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));

									currentOrder.setDiscountName(currentInventory.getDiscountNames());

									currentOrder.setDiscountRate(currentInventory.getDiscountRates());

									currentOrder.setDecreaseInStock(currentInventory);

									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());

									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());
									//start selection statement
									if (currentOrder.getDiscountRate() > 0.0)
									{// start order report
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), 
												currentOrder.getDiscountName(), currentOrder.getDiscountRate(),currentOrder.getDiscountAmt(), 
												currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), 
												currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), 
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}// end order report
									else
									{// start copy of order report
										displayOrderReport(userName,currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), 
												currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), 
												currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//end copy of order report
									//end selection statement
								}//end selection statement
							}//end selection structure

						}//end selection structure
						menuSelection = validateFileSelection(input);
					}//end

				}//End menuSelection not A selection Statement




			}//end selection structure
			//update read
			menuSelection = validateMainSelection(input);

		}//end while not quit

		// Start selection structure to test total cost
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		if (orders.getRecordCount() > 0)
		{
			//pass values from userName variable to getter in supportive class to void to final report
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(),
					currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}//End selection structure to test total cost

		//display farewell message
		displayFarewellMessage();

		//close scanner
		input.close();

	}//end prime read

	//void methods

	//void method to display welcome banner
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to the Store Program");
		System.out.println("With this program you can get all your needs");
		System.out.println("with our vast selection of Items. We also offer");
		System.out.println("multiple different discounts and you may even win ");
		System.out.println("a prize upon checkout. It will also provide a daily total");
		System.out.println("of all sales, counts for each item, discounts & prizes"); 
		//Border for easy reading
		System.out.println("***** ***** ***** ***** *****  ***** ***** ***** ***** *****");
	}//End of void method to display welcome banner

	//void method to display the farewell message
	public static void displayFarewellMessage()
	{
		//Farewell Message
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("Congratulations your a winner!");
		System.out.println("Thank you for your business. ");
		System.out.println("Have a great day!");
	}//End of void method to display farewell message

	public static void displayMainMenu()
	{//Void method to display main menu
		//declare and Initialize variable
		int localIndex = 0;
		//menu title
		System.out.println("\n Main Menu");

		//while run through array
		while (localIndex < MAIN_MENU_OPTIONS.length)
		{
			//display menu options
			System.out.printf("%-4s%s\n", CHAR_MAIN_MENU_OPTIONS[localIndex], MAIN_MENU_OPTIONS[localIndex]);
			//increment lcv
			localIndex++;
		}

		System.out.print("\nEnter selection here: ");
	}//ENd of display menu

	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{//Void method to display discount menu
		//declare and Initialize variable
		int localIndex = 0;
		//menu title
		System.out.println("\n Discount Menu");

		//while run through array
		while (localIndex < SUB_MENU_CHARS.length)
		{
			//display menu options
			System.out.printf("%-4s%-20s%10.1f%2s\n", SUB_MENU_CHARS[localIndex], borrowedDiscountNames[localIndex], (borrowedDiscountRates[localIndex] * 100), "%");
			//increment lcv
			localIndex++;
		}
		System.out.print("\nEnter selection here: ");
	}//ENd of display menu

	public static void dispayFileMenu()
	{//Void method to display discount menu
		//declare and Initialize variable
		int localIndex = 0;
		//menu title
		System.out.println("\n File Menu");

		//while run through array
		while (localIndex < FILE_MENU_CHARS.length)
		{
			//display menu options
			System.out.printf("%-4s%s\n", FILE_MENU_CHARS[localIndex], FILE_MENU_OPTIONS[localIndex]);
			//increment lcv
			localIndex++;
		}
		System.out.print("\nEnter selection here: ");
	}//ENd of display menu

	public static void displayOutOfStock()
	{ // display to user they have selected more than whats in stock
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		//Report Title
		System.out.println("\n OUT OF STOCK ERROR");
		System.out.println("The quantity enter is greater than the quantity in-stock");
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}// end display out of stock message

	public static void displayFileError()
	{//display the file was not found to user
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		//Report Title
		System.out.println("\n FILE ERROR");
		System.out.println("The file name was not found or could not be opened");
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//end display the file was not found to user

	public static void displayLoginError()
	{//display to user the login information does not match records
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		//Report Title
		System.out.println("\n LOGIN ERROR");
		System.out.println("Username and/or Password are incorrect");
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//end display to user the login information does not match records

	public static void displayNotFound()
	{//display to user the search information was not found
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		//Report Title
		System.out.println("\n NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}// end display to user the search information was not found

	public static void displayRecordReport(int borrowedRecordCount)
	{//display to user the amount of records processed
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		//Report Title
		System.out.println("\n RECORD REPORT");
		//The Following should print 3 columns
		//1 column is left aligned
		//All Columns printed as strings
		System.out.printf("%s%s%s\n", borrowedRecordCount, " ", "records processed");
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//end display to user the amount of records processed

	public static void displayAccountResults()
	{//display to the user the account was created
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		//Report Title
		System.out.println("\n ACCOUNT RESULTS");
		System.out.println("New account created");
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");	
	}//end display to the user the account was created

	public static void displayAccountResults(String userName)
	{//display to the user the account was not created because it already exist
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		//Report Title
		System.out.println("\n ACCOUNT RESULTS");
		System.out.printf("%s%s%s\n","Account not created:", userName, "already exist");
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");	
	}//end display to the user the account was not created because it already exist

	public static void displayOrderReport(String userName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, 
			double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, 
			double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		//Order Report
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		//Report Title
		System.out.println("Order Report");
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-23s%s%s\n", "Customer Name: "," ", userName);
		System.out.println("");
		//The Following should print 3 columns
		//1 column is left aligned
		//All Columns printed as strings
		System.out.printf("%-24s%s%s\n","Item Name:","", borrowedItemName);
		//The Following should print 3 columns
		//1 column is left aligned 
		//2 Columns printed as strings, 1 column is a double with 2 decimal places
		System.out.printf("%-24s%s%10.2f\n","Item Price:", "$",borrowedItemPrice);
		System.out.println("");
		//The Following should print 3 columns
		//1 column is left aligned
		//All Columns printed as strings
		System.out.printf("%-24s%s%s\n","Discount Name:","",borrowedDiscountName);
		//The Following should print 3 columns
		//1 column is left aligned 
		//2 Columns printed as strings, 1 column is a double with 2 decimal places
		System.out.printf("%-24s%10.1f%2s\n","Discount Rate:",(borrowedDiscountRate * 100), "%");
		//The Following should print 3 columns
		//1 column is left aligned 
		//2 Columns printed as strings, 1 column is a double with 2 decimal places
		System.out.printf("%-24s%s%10.2f\n","Discount Amount:", "$",borrowedDiscountAmt);
		//The Following should print 3 columns
		//1 column is left aligned 
		//2 Columns printed as strings, 1 column is a double with 2 decimal places
		System.out.printf("%-24s%s%10.2f\n","Discount Price:", "$",borrowedDiscountPrice);
		System.out.println("");
		//The Following should print 3 columns
		//1 column is left aligned
		//All Columns printed as strings
		System.out.printf("%-24s%s%8d\n","Quantity:","", borrowedHowMany);
		System.out.println("");
		//The Following should print 3 columns
		//1 column is left aligned 
		//2 Columns printed as strings, 1 column is a double with 2 decimal places
		System.out.printf("%-24s%s%10.2f\n","Subtotal:","$",borrowedSubTotal);
		//The Following should print 3 columns
		//1 column is left aligned 
		//2 Columns printed as strings, 1 column is a double with 2 decimal places
		System.out.printf("%-24s%10.1f%2s\n","Tax Rate:", (borrowedTaxRate * 100), "%");				
		//The Following should print 3 columns
		//1 column is left aligned 
		//2 Columns printed as strings, 1 column is a double with 2 decimal places
		System.out.printf("%-24s%s%10.2f\n","Tax Amount:", "$", borrowedTaxAmt);
		//The Following should print 3 columns
		//1 column is left aligned 
		//2 Columns printed as strings, 1 column is a double with 2 decimal places
		System.out.printf("%-24s%s%10.2f\n","Order Total:","$",borrowedTotalCost);
		System.out.printf("%-24s%s%s\n","Prize Name:","",borrowedPrizeName);
		System.out.printf("%-19s%d%s\n","Buy more now: Only",borrowedInStockCount, " left in stock!");
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//end void method to display order total

	public static void displayOrderReport(String userName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany,  double borrowedSubTotal, double borrowedTaxRate, 
			double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		//Order Report
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		//Report Title
		System.out.println("Order Report");
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-23s%s%s\n", "Customer Name: "," ", userName);
		System.out.println("");
		//The Following should print 3 columns
		//1 column is left aligned
		//All Columns printed as strings
		System.out.printf("%-24s%s%s\n","Item Name:","", borrowedItemName);
		//The Following should print 3 columns
		//1 column is left aligned 
		//2 Columns printed as strings, 1 column is a double with 2 decimal places
		System.out.printf("%-24s%s%10.2f\n","Item Price:", "$",borrowedItemPrice);
		System.out.println("");
		//The Following should print 3 columns
		//1 column is left aligned
		//All Columns printed as strings
		System.out.printf("%-24s%s%8d\n","Quantity:","", borrowedHowMany);
		System.out.println("");
		//The Following should print 3 columns
		//1 column is left aligned 
		//2 Columns printed as strings, 1 column is a double with 2 decimal places
		System.out.printf("%-24s%s%10.2f\n","Subtotal:","$",borrowedSubTotal);
		//The Following should print 3 columns
		//1 column is left aligned 
		//2 Columns printed as strings, 1 column is a double with 2 decimal places
		System.out.printf("%-24s%10.1f%2s\n","Tax Rate:", (borrowedTaxRate * 100), "%");				
		//The Following should print 3 columns
		//1 column is left aligned 
		//2 Columns printed as strings, 1 column is a double with 2 decimal places
		System.out.printf("%-24s%s%10.2f\n","Tax Amount:", "$", borrowedTaxAmt);
		//The Following should print 3 columns
		//1 column is left aligned 
		//2 Columns printed as strings, 1 column is a double with 2 decimal places
		System.out.printf("%-24s%s%10.2f\n","Order Total:","$",borrowedTotalCost);
		System.out.printf("%-24s%s%s\n","Prize Name:","",borrowedPrizeName);
		System.out.printf("%-19s%d%s\n","Buy more now: Only",borrowedInStockCount," left in stock!");
		//Border for easy reading
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");


	}//end void method to display order total

	//Start void method to display Final Report
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{
		int localIndex = 0;

		//Displays Final Report
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("Final Report");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%1s%12s%16s%8s%8s\n", "ID", "NAME","PRICE", "QTY", "TOTAL");

		//start run-while
		while (localIndex < borrowedRecordCount)
		{
			System.out.printf("%1d%12s%12s%8.2f%3d%4s%8.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex], borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]);
			localIndex++;
		}//end run-while
		//The Following should print 3 columns
		//1 column is left aligned 
		//2 Columns printed as strings, 1 column is a double with 2 decimal places
		System.out.println("\nGRAND TOTAL");
		System.out.printf("%1s%8.2f\n", "$", borrowedGrandTotal);
	}//End void method to display Final Report

	//vr methods

	//vr method to get user name
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";
		//prime read
		System.out.println("Please enter your username (or first name): ");
		localUserName = borrowedInput.next();
		return localUserName;
	}//End get user name method

	//vr method to get file name
	public static String getFileName(Scanner borrowedInput)
	{
		String localFileName = "";
		//prime read
		System.out.println("Enter the file name with extension(ie. filename.txt): ");
		localFileName = borrowedInput.next();
		return localFileName;
	}//End get file name method

	//vr method to get password
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";
		//prime read
		System.out.println("Enter password: ");
		localPassword = borrowedInput.next();
		return localPassword;
	}//End password method

	//vr method to validate selection from main menu
	public static char validateMainSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		//prime read
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//validation loop
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{
			//error message 
			System.out.println("~~Error: Invalid Selection.~~~");
			//update read
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End validation loop
		return localSelection;
	}//End of  Main menu method

	//vr method to validate selection from file menu
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		//prime read
		dispayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//validation loop
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'R')
		{
			//error message 
			System.out.println("~~Error: Invalid Selection.~~~");
			//update read
			dispayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End validation loop
		return localSelection;
	}//End of  file menu method

	//vr method to validate selection from quantity
	public static String validateHowMany(Scanner borrowedInput)
	{
		int localIndex = 0;
		//prime read
		System.out.println("Please enter quantity: ");
		localIndex = borrowedInput.nextInt();
		//validation loop
		while (localIndex <= 0)
		{
			//error message 
			System.out.println("~~Error: Invalid Quantity.~~~");
			//update read
			System.out.println("Please enter quantity: ");
			localIndex = borrowedInput.nextInt();
		}//End validation loop
		return String.valueOf(localIndex);
	}//End validation how Many

	//vr method to validate selection from discount menu
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection = ' ';
		//prime read
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//validation loop
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'C'  && localSelection != 'D')
		{
			//error message 
			System.out.println("~~Error: Invalid Selection.~~~");
			//update read
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of validation loop
		return localSelection;
	}//End of method

	//validate search value
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localIndex = 0;
		//prime read
		System.out.println("Enter the search value: ");
		localIndex = borrowedInput.nextInt();
		//validation loop
		while (localIndex <= 0)
		{
			//error message 
			System.out.println("~~Error: Invalid Value.~~~");
			//update read
			System.out.println("Enter the search value: ");
			localIndex = borrowedInput.nextInt();
		}//End validation loop
		return localIndex;
	}//end validate search value


}//end main class
